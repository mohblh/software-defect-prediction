import numpy as np
import pandas as pd
from ucimlrepo import fetch_ucirepo
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.svm import SVC
from sklearn.feature_selection import RFECV
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score

# ✅ Fetch dataset
breast_cancer_wisconsin_diagnostic = fetch_ucirepo(id=17)

# ✅ Extract features (X) and targets (y)
X = breast_cancer_wisconsin_diagnostic.data.features
y = breast_cancer_wisconsin_diagnostic.data.targets.values.ravel()  # Flatten target array

# ✅ Check for missing values
#print("\nMissing values per feature:\n", X.isnull().sum())

# ✅ Split dataset into training (80%) and testing (20%) sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# ✅ Normalize data (SVM performs better with normalized features)
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# ✅ Feature Selection using RFECV (automatically chooses the best features)
base_svm = SVC(kernel="linear")  # Linear SVM for feature selection
rfecv = RFECV(estimator=base_svm, step=1, cv=5, scoring='accuracy', n_jobs=-1)  
X_train_rfecv = rfecv.fit_transform(X_train, y_train)
X_test_rfecv = rfecv.transform(X_test)

# ✅ Print selected features and their count
print("\nOptimal number of features:", rfecv.n_features_)
selected_features = X.columns[rfecv.support_]
print("\nSelected Best Features:\n", selected_features)

# ✅ Define parameter grid for Grid Search
param_grid = {
    'C': [0.1, 1, 10, 100],
    'gamma': [0.01, 0.1, 0.5, 1],  # Regularization parameter
    'kernel': ['linear', 'rbf']  # Kernel types
}

# ✅ Perform Grid Search with 5-fold cross-validation
svm = SVC()
grid_search = GridSearchCV(svm, param_grid, cv=5, scoring='accuracy', n_jobs=-1)
grid_search.fit(X_train_rfecv, y_train)

# ✅ Get the best hyperparameters
best_svm = grid_search.best_estimator_
print("\nBest parameters found:", grid_search.best_params_)

# ✅ Train best SVM model on selected features
best_svm.fit(X_train_rfecv, y_train)
predections = best_svm.predict(X_test_rfecv)

# ✅ Evaluate the final model
print(accuracy_score(y_test,predections ))
